<?php

namespace phpqbo\Entities\Transaction;

use phpqbo\Entities\Entity;
use phpqbo\Entities\Types\CustomFieldType;
use phpqbo\Entities\Types\DateType;
use phpqbo\Entities\Types\LineType;
use phpqbo\Entities\Types\LinkedTxnType;
use phpqbo\Entities\Types\ModificationMetaDataType;
use phpqbo\Entities\Types\ReferenceType;
use phpqbo\Services\InvoiceService;

/**
 * Invoice Transaction Entity Class
 */
class Invoice extends Entity
{
  const METADATA = 'MetaData';

  /**
   * Descriptive information about the entity. The MetaData values are set by Data Services and are read only for all applications.
   * @var ModificationMetaDataType
   */
  protected $metadata = array();

  /**
   * maximum of 21 chars, filterable, sortable
   * Reference number for the transaction. If not explicitely provided at create time, this field is populated based on the setting of Preferences:CustomTxnNumber as follows:
   * If Preferences:CustomTxnNumber is true, resulting DocNumber is null.
   * If Preferences:CustomTxnNumber is false, resulting DocNumber is generated by incrementing the last number by 1.
   * Sort order is ASC by default.
   * @var  string
   */
  protected $docNumber;

  /**
   * Date, filterable, sortable, default is current server date
   * The date entered by the user when this transaction occurred.
   * For posting transactions, this is the posting date that affects the financial statements. If the date is not supplied, the current date on the server is used.
   * Sort order is ASC by default.
   * @var  DateType
   */
  protected $txnDate;

  /** @var CustomFieldType[]  */
  protected $customFields = array();
  /**
   * Location of the transaction, as defined using location tracking in QuickBooks Online.
   * @var  ReferenceType
   */
  protected $departmentRef;
  /** @var  ReferenceType */
  protected $currencyRef;
  //TODO: use Money class
  /** @var float  */
  protected $exchangeRate = 0.0;
  /** @var string  */
  protected $privateNote = '';
  /** @var LinkedTxnType[]  */
  protected $linkedTxn = array();
  /**
   * an array of Line items
   * @var LineType[]
   */
  protected $linesArray = array();


  public $attributes = array(
    self::ID,
  );

  /** @var  InvoiceService */
  protected $service;

  /**
   * @param InvoiceService $service
   * @return bool
   */
  protected function init(InvoiceService $service)
  {
    if ($service) {
      $this->service = $service;

      return true;
    }
    $this->service = new InvoiceService();

    return true;
  }

  /**
   * @param InvoiceService|null $service
   */
  public function update(InvoiceService $service = null)
  {
    $this->init($service);
  }

  /**
   * @param InvoiceService|null $service
   */
  public function create(InvoiceService $service = null)
  {
    $this->init($service);
    $this->service->create($this);
  }

  /**
   * @param InvoiceService|null $service
   */
  public function delete(InvoiceService $service = null)
  {
    $this->init($service);
    $this->service->delete($this);
  }

  /**
   * @param string $email
   * @param InvoiceService|null $service
   */
  public function send($email, InvoiceService $service = null)
  {
    $this->init($service);
    $this->service->send($email, $this);
  }

  /**
   * @param InvoiceService|null $service
   * @return string
   */
  public function getPDF(InvoiceService $service = null)
  {
    $this->init($service);
    $pdf = $this->service->getPDF($this);
    return $pdf;
  }
}
